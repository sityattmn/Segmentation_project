# -*- coding: utf-8 -*-"""Created on Wed Jul  17 10:43:07 2023@author: S.Mouhamadi"""import osimport numpy as npimport bm4dimport scipy.io as spfrom skimage import feature, segmentation, exposureimport matplotlib.pyplot as plt# Define the path to the folder containing the .mat filesfolder_path = "C:/Users/Portatil PC 7/Documents/Data/Calves_ImageD"# Iterate over the files in the folderfor file_name in os.listdir(folder_path):    file_path = os.path.join(folder_path, file_name)    # Load the MATLAB file    mat_data = sp.loadmat(file_path)    image_data = np.abs(mat_data['image3D'])    image3D = image_data.astype(np.float64)    # Estimate the noise level     noise = np.std(image3D)    sigma_psd = noise / np.sqrt(2 * np.log(image3D.size))    profile = bm4d.BM4DProfile()  # Default profile    stage_arg = bm4d.BM4DStages.ALL_STAGES  # Perform both hard thresholding and Wiener filtering    blockmatches = (False, False)  # Do not use previous blockmatches    # Apply BM4D to the image    imageDenoised = bm4d.bm4d(image3D, sigma_psd=sigma_psd, profile=profile, stage_arg=stage_arg, blockmatches=blockmatches)    # Update the filtered image in the MATLAB file    mat_data['imageDenoised'] = imageDenoised    # Select a slice for visualization    slice_index = 10  # Modify this to the desired slice index        # Apply intensity normalization to the selected slice    normalized_image3D = exposure.rescale_intensity(image3D[slice_index,:,:])    normalized_imageDenoised = exposure.rescale_intensity(imageDenoised[slice_index,:,:])        # Apply contour detection (Canny edge detection) to the selected slice    edges_original = feature.canny(normalized_image3D, sigma=0.1)    edges_denoised = feature.canny(normalized_imageDenoised, sigma=0.1)    # Generate marked boundaries for the original and denoised images    marked_original = segmentation.mark_boundaries(normalized_image3D, edges_original)    marked_denoised = segmentation.mark_boundaries(normalized_imageDenoised, edges_denoised)         plt.subplot(2, 2, 1)    plt.imshow(image3D[slice_index,:,:], cmap='gray')    plt.axis('off')    plt.title(f'Original Image (Slice {slice_index+1})')    plt.subplot(2, 2, 2)    plt.imshow(imageDenoised[slice_index,:,:], cmap='gray')    plt.axis('off')    plt.title(f'Denoised Image (Slice {slice_index+1})')    plt.subplot(2, 2, 3)    plt.imshow(marked_original, cmap='gray')    plt.axis('off')    plt.title(f'Contour Detection - Denoised Image (Slice {slice_index+1})')    plt.subplot(2, 2, 4)    plt.imshow(marked_denoised, cmap='gray')    plt.axis('off')    plt.title(f'Contour Detection - Original Image (Slice {slice_index+1})')    plt.show()